version: '3.8'

services:
  # ===== MICROSERVICIOS =====

  # Config Server - Configuración centralizada
  config-server:
    build: ./microservices/config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native
    networks:
      - tech-stack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Service Registry - Eureka Server
  service-registry:
    build: ./microservices/service-registry
    ports:
      - "8761:8761"
    depends_on:
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - tech-stack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # API Gateway - Punto de entrada único
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - config-server
      - service-registry
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka
    networks:
      - tech-stack
    labels:
      - "swagger.enable=true"
      - "swagger.port=8080"
      - "swagger.path=/swagger-ui.html"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Usuario Service - Gestión de usuarios
  usuario-service:
    build: ./microservices/usuario-service
    ports:
      - "8081:8081"
    depends_on:
      - config-server
      - service-registry
      - oracle
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka
      - DATABASE_URL=jdbc:oracle:thin:@oracle:1521:xe
      - DATABASE_USER=${DB_USER:-system}
      - DATABASE_PASSWORD=${DB_PASSWORD:-oracle}
    networks:
      - tech-stack
    labels:
      - "swagger.enable=true"
      - "swagger.port=8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Product Service - Catálogo de productos
  product-service:
    build: ./product-service
    ports:
      - "8082:8082"
    depends_on:
      - config-server
      - service-registry
      - oracle
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka
      - DATABASE_URL=jdbc:oracle:thin:@oracle:1521:xe
      - DATABASE_USER=${DB_USER:-system}
      - DATABASE_PASSWORD=${DB_PASSWORD:-oracle}
    networks:
      - tech-stack
    labels:
      - "swagger.enable=true"
      - "swagger.port=8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Order Service - Procesamiento de pedidos
  order-service:
    build: ./order-service
    ports:
      - "8083:8083"
    depends_on:
      - config-server
      - service-registry
      - usuario-service
      - product-service
      - oracle
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka
      - DATABASE_URL=jdbc:oracle:thin:@oracle:1521:xe
      - DATABASE_USER=${DB_USER:-system}
      - DATABASE_PASSWORD=${DB_PASSWORD:-oracle}
    networks:
      - tech-stack
    labels:
      - "swagger.enable=true"
      - "swagger.port=8083"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Notification Service - Notificaciones
  notification-service:
    build: ./notification-service
    ports:
      - "8084:8084"
    depends_on:
      - config-server
      - service-registry
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka
    networks:
      - tech-stack
    labels:
      - "swagger.enable=true"
      - "swagger.port=8084"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ===== INFRAESTRUCTURA =====

  # Aplicación Java principal
  app:
    build: .
    ports:
      - "8085:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:oracle:thin:@oracle:1521:xe
      - DATABASE_USER=${DB_USER:-system}
      - DATABASE_PASSWORD=${DB_PASSWORD:-oracle}
    depends_on:
      - oracle
      - loki
    networks:
      - tech-stack
    volumes:
      - ./logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`app.localhost`)"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Oracle Database
  oracle:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    ports:
      - "1521:1521"
      - "5500:5500"
    env_file:
      - .env
    environment:
      - ORACLE_PWD=${DB_PASSWORD:-oracle}
      - ORACLE_CHARACTERSET=AL32UTF8
    volumes:
      - oracle_data:/opt/oracle/oradata
      - ./oracle/init:/docker-entrypoint-initdb.d
    networks:
      - tech-stack
    healthcheck:
      test: ["CMD", "sqlplus", "-L", "system/oracle@//localhost:1521/xe", "@/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # SonarQube para análisis de calidad
  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      - postgres
    networks:
      - tech-stack

  # PostgreSQL para SonarQube
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - tech-stack

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - tech-stack
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Loki para logs
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml
    networks:
      - tech-stack
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Promtail para recolección de logs
  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log:ro
      - ./logs:/app/logs:ro
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - tech-stack

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tech-stack
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Portainer para gestión Docker
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9001:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - tech-stack

  # Node Exporter para métricas del sistema
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - tech-stack

volumes:
  oracle_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgresql_data:
  grafana_data:
  loki_data:
  prometheus_data:
  portainer_data:

networks:
  tech-stack:
    driver: bridge
