stages:
  - build
  - test
  - quality
  - package
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache para Maven
cache:
  paths:
    - .m2/repository/
    - target/

# Build stage
build:
  stage: build
  image: maven:3.8.1-openjdk-11
  script:
    - mvn clean compile
  artifacts:
    paths:
      - target/
    expire_in: 1 hour

# Test stage
test:
  stage: test
  image: maven:3.8.1-openjdk-11
  script:
    - mvn test
  artifacts:
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
    paths:
      - target/site/jacoco/
    expire_in: 1 hour
  coverage: '/Total.*?([0-9]{1,3})%/'

# SonarQube analysis
sonarqube-check:
  stage: quality
  image: maven:3.8.1-openjdk-11
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify sonar:sonar
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
  allow_failure: true
  only:
    - merge_requests
    - master
    - develop

# Package stage
package:
  stage: package
  image: maven:3.8.1-openjdk-11
  script:
    - mvn package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 day

# Docker build
docker-build:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  dependencies:
    - package

# Deploy to development
deploy-dev:
  stage: deploy
  image: docker/compose:1.29.2
  before_script:
    - apk add --no-cache curl
  script:
    - docker-compose -f docker-compose.dev.yml down
    - docker-compose -f docker-compose.dev.yml pull
    - docker-compose -f docker-compose.dev.yml up -d
  environment:
    name: development
    url: http://dev.ejemplo.com
  only:
    - develop

# Deploy to staging
deploy-staging:
  stage: deploy
  image: docker/compose:1.29.2
  script:
    - docker-compose -f docker-compose.staging.yml down
    - docker-compose -f docker-compose.staging.yml pull
    - docker-compose -f docker-compose.staging.yml up -d
  environment:
    name: staging
    url: http://staging.ejemplo.com
  only:
    - master
  when: manual

# Deploy to production using Docker Swarm
deploy-production:
  stage: deploy
  image: docker:20.10.16
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  script:
    - scp docker-compose.swarm.yml user@$PRODUCTION_SERVER:/tmp/
    - ssh user@$PRODUCTION_SERVER "docker stack deploy -c /tmp/docker-compose.swarm.yml tech-stack"
  environment:
    name: production
    url: http://produccion.ejemplo.com
  only:
    - master
  when: manual

# Security scan
security-scan:
  stage: quality
  image: owasp/zap2docker-stable
  script:
    - mkdir -p /zap/wrk/
    - zap-baseline.py -t http://app:8080 -J gl-sast-report.json || true
  artifacts:
    reports:
      sast: gl-sast-report.json
  allow_failure: true
